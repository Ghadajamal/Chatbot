package chatDelivery;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.Icon;
import javax.swing.*;
import raven.chat.component.ChatBox;
import raven.chat.model.ModelMessage;
import raven.chat.swing.ChatEvent;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;

import javax.swing.*;

public class Bot extends javax.swing.JFrame {

    
    private raven.chat.swing.Background background1;
    private raven.chat.component.ChatArea chatArea;
	public Bot() {
	    initComponents();
	    chatArea.setTitle("chatbot assistance");
	    SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy, hh:mmaa");
	    // for pressing send
	    chatArea.addChatEvent(new ChatEvent() {
	        @Override
	        public void mousePressedSendButton(ActionEvent evt) {
	            String message = chatArea.getText().trim();
	            addChatBox(message);
	        }

			@Override
			public void mousePressedFileButton(ActionEvent evt) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyTyped(KeyEvent evt) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyTyped1(KeyEvent evt) {
				// TODO Auto-generated method stub
				
			}
	    });
	    
	    // for pressing enter
	    chatArea.addKeyListener(new KeyAdapter() {
	        public void keyPressed(KeyEvent e) {
	            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
	                String message = chatArea.getText().trim();
	                addChatBox(message);
	            }
	        }
	    });
	}
	
	
    // this code is used to factorize
    private void addChatBox(String message) {
        Icon iconUser = new ImageIcon(getClass().getResource("../p1.png"));
        Icon iconBot = new ImageIcon(getClass().getResource("../bot.png"));
        String name = "User";
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy, hh:mmaa");

        String date = df.format(new Date());

        chatArea.addChatBox(new ModelMessage(iconUser, name, date, message), ChatBox.BoxType.RIGHT);
        chatArea.clearTextAndGrabFocus();

        if (message.contains("hi")) {
            displayResponse("hi there",iconBot);
        } else {
            displayResponse("im sorry i can't understand",iconBot);
        }
    }
    
    // to display the reponse of the chatbot
    public void displayResponse(String textToAdd ,Icon icon) {
    	SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy, hh:mmaa");
    	String pending ="Chatbot is writing...";
        String date = df.format(new Date());
    	ModelMessage mymsg = new ModelMessage(icon, "Bot", date, pending);
    	ChatBox MyChatbox = new ChatBox(ChatBox.BoxType.LEFT,mymsg);
        chatArea.addChatBox(mymsg, ChatBox.BoxType.LEFT);
    	Timer timer = new Timer(1300, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // remove the Chatbot writing bubble from the chatPanel
                chatArea.removeChatBox(MyChatbox);
                chatArea.addChatBox(new ModelMessage(icon, "Bot", date, textToAdd), ChatBox.BoxType.LEFT);
                chatArea.clearTextAndGrabFocus();
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
            }
        });
        timer.setRepeats(false);
        timer.start();
    }
    
    @SuppressWarnings("unchecked")
    private void initComponents() {

        background1 = new raven.chat.swing.Background();
        chatArea = new raven.chat.component.ChatArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(false);

        javax.swing.GroupLayout background1Layout = new javax.swing.GroupLayout(background1);
        background1.setLayout(background1Layout);
        background1Layout.setHorizontalGroup(
            background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chatArea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );
        background1Layout.setVerticalGroup(
            background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chatArea, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bot().setVisible(true);
            }
        });
    }

}
